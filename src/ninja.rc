#!/usr/bin/env bash
#set -x

########################################################
# The MIT License (MIT)
# Copyright (c) 2016 Tim Menzies tim@menzies.us

# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and
# associated documentation files (the "Software"), to
# deal in the Software without restriction, including
# without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to
# whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission
# notice shall be included in all copies or
# substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
# OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
# OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
########################################################

tput setaf 3
cat <<'EOF'
############################################################
      ___                                                             
     /___\_/                                                          
     |\_/|<\                         Command line ninja!!!!
     (`o`) `   __(\_            |\_  Attack!!!                                 
     \ ~ /_.-`` _|__)  ( ( ( ( /()/                                   
    _/`-`  _.-``               `\|   
 .-`      (    .-.                                                    
(   .-     \  /   `-._                                                
 \  (\_    /\/        `-.__-()                                        
  `-|__)__/ /  /``-.   /_____8                                        
        \__/  /     `-`                                               
       />|   /                                                        
      /| J   L                                                        
      `` |   |                                                        
         L___J                                                        
          ( |
         .oO()                                                        
###########################################################
EOF
tput sgr0

trap zap 0 1 2 3 4 15
zap() { echo "Zapping..." ; rm -rf $Tmp; }

########################################################
eg1() { ok; crossval 2 2 data/soybean.arff   $RANDOM j48 nb; }
eg2() { ok; crossval 5 5 data/jedit-4.1.arff $RANDOM j48 nb |
	    gawk  '/true/ {print $2,$10,$11}'
      }

########################################################
alias ls='ls -G'                 ## short format
alias ll='ls -la'                ## long format
alias l.='ls -d .* --color=auto' ## Show hidden files

## get rid of a common 'command not found' error
alias cd..='cd ..'
 
## a quick way to get out of current directory ##
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

######################################################
#pipe into a while and if
#— tow different pies
#make: don’t redo
#nohup

# pattern
#fetch : curl find mysql
#select: grep sql awk etc
#transform: sort, head, tail, sed, gawk
#learn
#report
#visualize: gnuplot,gvpr

######################################################

Ed="/Applications/Emacs.app/Contents/MacOS/Emacs"
Edot="/tmp/edot$$"
Me=demo1

Tmp="/tmp/$USER/$$" # some places, /tmp is size restricted. Here, you want some place BIG
Safe="$HOME/tmp/safe/$Me"

## Raw = source of raw data; Cooked= pre-processed stuff
Raw=$Here
Cooked="$Safe"

## java libraries
Jar="$Here/weka.jar"
Weka="java -Xmx1024M -cp $Jar "

ok() { dirs; }

dirs() {
    mkdir -p $Safe $Tmp $Raw, $cooked
}

cat << 'EOF' > $Edot
(progn

  (setq require-final-newline    t) 
  (setq next-line-add-newlines nil) 
  (setq inhibit-startup-message  t)
  (setq-default fill-column     52)
  (setq column-number-mode       t)
  (setq make-backup-files      nil) 
  (transient-mark-mode           t)
  (global-font-lock-mode         t)
  (global-hl-line-mode           0)  
  (xterm-mouse-mode              t)
  (setq scroll-step              1)
  (show-paren-mode               t))

(setq display-time-day-and-date t) (display-time) 
(setq-default indent-tabs-mode nil) 

(fset 'yes-or-no-p 'y-or-n-p) 

(setq frame-title-format
  '(:eval
    (if buffer-file-name
        (replace-regexp-in-string
         "\\\\" "/"
         (replace-regexp-in-string
          (regexp-quote (getenv "HOME")) "~"
          (convert-standard-filename buffer-file-name)))
      (buffer-name))))

(add-hook 'python-mode-hook
   (lambda ()
      (setq indent-tabs-mode nil
            tab-width 2
            python-indent 2)))

EOF
########################################################
killControlM() { tr -d '\015'; } 
downCase()     { tr A-Z a-z; }
stemming()     { perl $Here/stemming.pl  ; }
stops()        {  gawk ' 
       NR==1 {while (getline < Stops)  Stop[$0] = 1;
                                while (getline < Keeps)  Keep[$0] = 1; 
                             }
                            { for(I=1;I<=NF;I++) 
                                  if (Stop[$I] && ! Keep[$I]) $I=" "
                      print $0
                          }' Stops="$Here/stop_words.txt" \
                               Keeps="$Here/keep_words.txt" 
                            }
prep()  { killControlM | downCase | 
                  stemming | stops; }

########################################################

linearRegression(){
	local learner=weka.classifiers.functions.LinearRegression 
	$Weka $learner -S 0 -R $3 -p 0 -t $1 -T $2
}
bnet(){
        local learner=weka.classifiers.bayes.BayesNet
	$Weka $learner -p 0 -t $1 -T $2 -D \
	    -Q weka.classifiers.bayes.net.search.local.K2 -- -P 2 -S BAYES \
	    -E weka.classifiers.bayes.net.estimate.SimpleEstimator -- -A 0.5 
}
bnet10(){
        local learner=weka.classifiers.bayes.BayesNet
	$Weka $learner -i -t $1 -D \
	    -Q weka.classifiers.bayes.net.search.local.K2 -- -P 2 -S BAYES \
	    -E weka.classifiers.bayes.net.estimate.SimpleEstimator -- -A 0.5 
}
nb() {
 	local learner=weka.classifiers.bayes.NaiveBayes
	$Weka $learner -p 0 -t $1 -T $2  
}
nb10() {
	local learner=weka.classifiers.bayes.NaiveBayes
	$Weka $learner -i -t $1   
}
j48() {
	local learner=weka.classifiers.trees.J48
	$Weka $learner -p 0 -C 0.25 -M 2 -t $1 -T $2
}
j4810() {
	local learner=weka.classifiers.trees.J48
	$Weka $learner	-C 0.25 -M 2 -i -t $1 
}
zeror() {
        local learner=weka.classifiers.rules.ZeroR
	$Weka $learner -p 0 -t $1 -T $2
}
zeror10() {
        local learner=weka.classifiers.rules.ZeroR
	$Weka $learner -i -t $1
}
oner() {
        local learner=weka.classifiers.rules.OneR
	$Weka $learner -p 0 -t $1 -T $2
}
oner10() {
        local learner=weka.classifiers.rules.OneR
	$Weka $learner -i -t $1
}
rbfnet(){
        local learner=weka.classifiers.functions.RBFNetwork
	$Weka $learner -p 0 -t $1 -T $2 -B 2 -S 1 -R 1.0E-8 -M -1 -W 0.1
}
rbfnet10(){
        local learner=weka.classifiers.functions.RBFNetwork
	$Weka $learner -i -t $1 -B 2 -S 1 -R 1.0E-8 -M -1 -W 0.1
}
ridor() {
       local learner=weka.classifiers.rules.Ridor
	$Weka $learner -F 3 -S 1 -N 2.0 -p 0 -t $1 -T $2 
}
ridor10(){
       local learner=weka.classifiers.rules.Ridor
       $Weka $learner -F 3 -S 1 -N 2.0 -i -t $1
}
adtree() {
       local learner=weka.classifiers.trees.ADTree
       $Weka $learner -B 10 -E -3 -p 0 -t $1 -T $2
}
adtree10() {
       local learner=weka.classifiers.trees.ADTree
       $Weka $learner -B 10 -E -3 -p 0 -i -t $1
}
########################################################

wantgot() { gawk '/:/ {
                      split($2,a,/:/); actual    = a[2] 
                      split($3,a,/:/); predicted = a[2]
                      print actual, predicted }'
}
trainTest() {
    local learner=$1
    local train=$2
    local test=$3
    echo "$learner $data"
    $learner $train $test | wantgot
}

abcd() { python3 $Here/abcd.py; }

crossval() {
    local m=$1
    local n=$2
    local data=$3
    local r=$4
    shift 4
    local learners=$*
    killControlM < $data |
    gawk 'BEGIN                 { srand('$r') }
          /^.RELATION/,/^.DATA/ { header= header "\n" $0; next } 
          $0                    { Row[NR] = $0 }
          END                   { 
           for(i=1; i<=m; i++)
             for(j=1; j<=n; j++)  {
               arff  = i "_" j ".arff"
               test  = dir "/test"  arff
               train = dir "/train" arff
               print header  >test
               print header  >train
               for(r in Row) { 
                 if (rand() < 1/n) 
                   print(Row[r]) >> test
                 else
                   print(Row[r]) >> train }}}
         ' n=$n m=$m dir=$Tmp 
    echo $Tmp
    cd $Tmp
    for learner in $learners; do
	for((i=1; i<=$m; i++)); do
	    for((j=1; j<=$n; j++)); do
              local arff="${i}_${j}.arff"		
	      trainTest $learner train$arff test$arff | abcd
	   done
	done
    done
    cd $Here
}


########################################################
# git tricks
gitpush() {
    gitting
    git status
    git commit -am "saving"
    git push origin master
}
gitpull() {
    gitting
    git pull origin master
}

gitting() {
     git config --global credential.helper cache
     git config credential.helper 'cache --timeout=3600'
}
########################################################

reload() { . $Here/ninja.rc ; }
e()      { $Ed -q -l "$Edot" $* & 
         }

########################################################

here() { cd $1; basename $PWD; }

PROMPT_COMMAND='echo  -ne "NINJA:\033]0; $(here ..)/$(here .)\007"
PS1=" $(here ..)/$(here .) \!> "'

#######################################################
## start up comments
ok
